read.csv("data/02_magma/09_pValueAdjustedGeneSetAnalysis/0.csv")
# Filter data based on P values and create Log_Adjust_P column
filtered_data <- data %>%
filter(P < 0.1) %>%
mutate(
Log_Adjust_P = 0 - log10(Adjust_P),
FULL_NAME  = str_replace(str_replace(FULL_NAME , "_", " "), ".csv", "")
)
filtered_data
filtered_data <- data %>%
filter(P < 0.1) %>%
mutate(
Log_Adjust_P = 0 - log10(Adjust_P),
FULL_NAME  = str_replace(str_replace_all(FULL_NAME , "_", " "), ".csv", "")
)
filtered_data
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = BETA
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 1.75))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = BETA
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 2))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = BETA
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = BETA
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = log(BETA)
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
# Load required packages
library(dplyr)
library(ggplot2)
library(stringr)
# Read CSV as a data frame
data <-
read.csv("data/02_magma/09_pValueAdjustedGeneSetAnalysis/0.csv")
# Filter data based on P values and create Log_Adjust_P column
filtered_data <- data %>%
filter(P < 0.1) %>%
mutate(
Log_Adjust_P = 0 - log10(Adjust_P),
FULL_NAME  = str_replace(str_replace_all(FULL_NAME , "_", " "), ".csv", "")
)
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = 0-log10(BETA)
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = -log10(BETA)
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES,
color = log10(BETA)
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
ggplot(filtered_data,
aes(
x = reorder(FULL_NAME,-Log_Adjust_P),
y = Log_Adjust_P,
size = NGENES
)) +
geom_point() +
labs(x = "Gene Set", y = "0-log10(Adjusted P-Value)", size = "Number of Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_hline(
yintercept = -log10(0.05),
linetype = "dotted",
color = "black"
) +
scale_colour_continuous(type = "viridis") +
coord_cartesian(ylim = c(0, 3.25))
library(data.table)
library(tidyverse)
library(dplyr)
library(biomaRt)
library(ggvenn)
input_file_path <-
"data/01_geneLists/07_diseaseGwasResults/gwasCatalogue/"
output_file_path <-
"data/01_geneLists/07_diseaseGwasResults/genesToRemove/"
ensembl <-
useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
disease_associated_genes <-
c(
"MOBP",
"NEK1",
"TNIP1",
"ERGIC1",
"HLA-DQB1",
"PTPRN2",
"C9orf72",
"TBK1",
"KIF5A",
"COG3",
"SCFD1",
"SLC9A8",
"CFAP410",
"SOD1",
"UNC13A"
)
disease_associated_genes <- getBM(
attributes = c('hgnc_symbol'),
filters = 'hgnc_symbol',
values = disease_associated_genes,
mart = ensembl
) %>%
as.list() %>%
unlist() %>%
unique()
length(disease_associated_genes)
dir.create(output_file_path,
showWarnings = FALSE)
write.csv(
disease_associated_genes,
paste0(output_file_path, "gwasCatalogueGenes.csv"),
row.names = FALSE
)
original_disease_gene_list <-
read.csv("data/01_geneLists/01_knownDiseaseRelatedGenes/combinedGeneList.csv") %>%
as.list() %>%
unlist() %>%
unname()
combined_disease_gene_list <- original_disease_gene_list %>%
append(disease_associated_genes) %>%
unique()
write.csv(
combined_disease_gene_list,
paste0(output_file_path, "gwasCataloguePlusOrginalGenes.csv"),
row.names = FALSE
)
combined_gene_list <- list(original = original_disease_gene_list,
gwas = disease_associated_genes)
ggvenn(combined_gene_list,
set_name_size = 12,
text_size = 12)
library(data.table)
library(biomaRt)
library(dplyr)
input_file_path <-
"data/01_geneLists/07_diseaseGwasResults/genesToRemove/"
original_genes_input_file_path <-
"data/01_geneLists/01_knownDiseaseRelatedGenes/combinedGeneList.csv"
output_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/diseaseRelatedGenes/"
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
input_file_paths <-
c(original_genes_input_file_path,
paste0(input_file_path, list.files(input_file_path)))
ensembl <-
useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
for (file_path in input_file_paths) {
disease_related_genes <-
fread(file_path) %>%
as.list() %>%
unname() %>%
unlist()
x <- listAttributes(ensembl)
disease_related_genes <- getBM(
attributes = c('entrezgene_id'),
filters = 'hgnc_symbol',
values = disease_related_genes,
mart = ensembl
) %>%
unique()
fwrite(disease_related_genes,
paste0(output_file_path,
sub('.*\\/', '', file_path)),
row.names = FALSE)
}
library(data.table)
library(biomaRt)
library(dplyr)
input_file_path <-
"data/01_geneLists/05_geneEnrichmentTermGenes/"
output_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/"
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
ensembl <-
useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
output_directory <- paste0(output_file_path, directory, "/")
dir.create(output_directory,
showWarnings = FALSE,
recursive = TRUE)
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist()
gene_list <- getBM(
attributes = c('entrezgene_id'),
filters = 'hgnc_symbol',
values = gene_list,
mart = ensembl
) %>%
unique()
fwrite(gene_list,
paste0(output_directory,
input_file),
row.names = FALSE)
}
}
dglinker_genes_input_file_path <-
"data/01_geneLists/06_dglinker_results/allPublicationDataBases/model_results/"
dglinker_file_name <- list.files(dglinker_genes_input_file_path,
pattern = "results")
dglinker_file_path <- paste0(dglinker_genes_input_file_path,
dglinker_file_name)
dglinker_data <- fread(dglinker_file_path) %>%
as.data.frame() %>%
filter(`Association type` != "Not-associated") %>%
dplyr::select(`Gene name`) %>% as.list() %>% unname() %>% unlist()
output_directory <- paste0(output_file_path, "dglinker/")
dir.create(output_directory,
showWarnings = FALSE,
recursive = TRUE)
dglinker_data <- getBM(
attributes = c('entrezgene_id'),
filters = 'hgnc_symbol',
values = dglinker_data,
mart = ensembl
) %>%
unique()
fwrite(dglinker_data,
paste0(output_directory,
"dglinker.csv"),
row.names = FALSE)
library(data.table)
library(dplyr)
library(stringr)
input_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/"
output_file_path <-
"data/01_geneLists/09_magmaInput/"
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "magmaInput.txt"),
sep = "\n",
quote = FALSE
)
library(data.table)
library(dplyr)
library(stringr)
input_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/"
output_file_path <-
"data/01_geneLists/09_magmaInput/"
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "geneSetsIncludingKnownDiseaseGenes.txt"),
sep = "\n",
quote = FALSE
)
library(data.table)
library(dplyr)
library(stringr)
input_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/"
output_file_path <-
"data/01_geneLists/09_magmaInput/"
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
directories
paste0(input_file_path,
"diseaseRelatedGenes/gwasCataloguePlusOrginalGenes.csv") %>%
fread() %>%
as.list()
paste0(input_file_path,
"diseaseRelatedGenes/gwasCataloguePlusOrginalGenes.csv") %>%
fread() %>%
as.list() %>%
unname()
paste0(input_file_path,
"diseaseRelatedGenes/gwasCataloguePlusOrginalGenes.csv") %>%
fread() %>%
as.list() %>%
unname() %>%
unlist()
genesToRemove <-
paste0(input_file_path,
"diseaseRelatedGenes/gwasCataloguePlusOrginalGenes.csv") %>%
fread() %>%
as.list() %>%
unname() %>%
unlist()
directories
library(data.table)
library(dplyr)
library(stringr)
input_file_path <-
"data/01_geneLists/08_geneListsInEntrezIdFormat/"
output_file_path <-
"data/01_geneLists/09_magmaInput/"
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
genesToRemove <-
paste0(input_file_path,
"diseaseRelatedGenes/gwasCataloguePlusOrginalGenes.csv") %>%
fread() %>%
as.list() %>%
unname() %>%
unlist()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
if(directory != "diseaseRelatedGenes") {
gene_list <- gene_list[!gene_list %in% genesToRemove]
}
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "geneSetsExcludingKnownDiseaseGenes.txt"),
sep = "\n",
quote = FALSE
)
list.files("R/01_creating_ALS_gene_list")
?install.packages
?BiocManager::install

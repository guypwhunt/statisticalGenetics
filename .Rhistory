row.names = FALSE,
col.names = FALSE
)
}
}
library(data.table)
library(dplyr)
library(stringr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/01_gene_sets/")
output_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/02_magmaInput/")
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "geneSetsIncludingKnownDiseaseGenes.txt"),
sep = "\n",
quote = FALSE
)
library(data.table)
library(dplyr)
library(stringr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/01_gene_sets/")
output_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/02_magmaInput/")
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path, header = FALSE) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "geneSetsIncludingKnownDiseaseGenes.txt"),
sep = "\n",
quote = FALSE
)
library(data.table)
library(dplyr)
library(stringr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/01_gene_sets/")
output_file_path <-
paste0("data/06_format_gene_sets/",
input_file_name,
"/02_magmaInput/")
dir.create(output_file_path, showWarnings = FALSE)
directories <- sub('.*\\/', '', list.dirs(input_file_path))
directories <- directories[directories != ""]
magma_input <- list()
genesToRemove <-
paste0(
"data/06_format_gene_sets/",
input_file_name,
"/01_gene_sets/diseaseAssociatedGenes/gwasAndDiseaseAssociatedGenes.csv"
) %>%
fread(header = FALSE) %>%
as.list() %>%
unname() %>%
unlist()
for (directory in directories) {
input_directory <- paste0(input_file_path, directory, "/")
input_files <- list.files(input_directory)
for (input_file in input_files) {
temp_input_file_path <- paste0(input_directory, input_file)
temp_input_file <- input_file %>%
str_replace_all(" ", "_")
gene_list <- fread(temp_input_file_path) %>%
as.list() %>%
unname() %>%
unlist() %>%
as.list()
if (directory != "diseaseRelatedGenes") {
gene_list <- gene_list[!gene_list %in% genesToRemove]
}
gene_list <-
paste(directory, paste(temp_input_file, paste(gene_list, collapse = " ")), sep = "_")
magma_input <- append(gene_list, magma_input)
}
}
magma_input <- as.list(magma_input) %>%
unlist() %>%
as.list()
fwrite(
magma_input,
paste0(output_file_path, "geneSetsExcludingKnownDiseaseGenes.txt"),
sep = "\n",
quote = FALSE
)
library(dplyr)
library(tidyverse)
library(rrvgo)
input_file_name <- "als"
input_file_path <-
paste0(
"data/02_gene_set_enrichment/02_significant_gene_enrichment_results/",
input_file_name,
"/"
)
output_file_path <-
paste0(
"data/02_gene_set_enrichment/03_significant_non_redundant_gene_enrichmentResults/",
input_file_name,
"/"
)
go_file_names <-
list.files(
path = input_file_path,
pattern = "GO",
all.files = FALSE,
full.names = FALSE
)
#######################
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
for (go_file_name in go_file_names) {
go_path_name_to_summarise <-
paste0(input_file_path, "/", go_file_name)
go_data_frame <-
read.csv(go_path_name_to_summarise, header = TRUE)
simMatrix <- calculateSimMatrix(
go_data_frame$ID,
orgdb = "org.Hs.eg.db",
ont = if (go_file_name == "GO_Biological_Process_2023.csv") {
"BP"
} else if (go_file_name == "GO_Cellular_Component_2023.csv") {
"CC"
} else {
"MF"
},
method = "Rel"
)
scores <-
setNames(-log10(go_data_frame$Adjusted.P.value), go_data_frame$ID)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold = 0.7,
orgdb = "org.Hs.eg.db")
reducedGoTerms <-
data.frame(matrix(nrow = 0, ncol = length(colnames(reducedTerms))))
colnames(reducedGoTerms) <- colnames(reducedTerms)
for (cluster in seq(unique(reducedTerms$cluster))) {
temp_reducedTerms <- reducedTerms %>%
filter(cluster == !!cluster) %>%
filter(score == max(score))
reducedGoTerms <- rbind(reducedGoTerms, temp_reducedTerms)
}
go_data_frame <-
go_data_frame[go_data_frame$ID %in% reducedGoTerms$go, ]
write.csv(go_data_frame,
paste0(output_file_path, go_file_name),
row.names = FALSE)
}
View(go_data_frame)
View(scores)
reducedTerms
temp_reducedTerms
max(score)
temp_reducedTerms <- reducedTerms %>%
filter(cluster == !!cluster) %>%
arrange(desc(score)) %>%
slice(1:3)
temp_reducedTerms
reducedTerms %>%
filter(cluster == !!cluster)
library(dplyr)
library(tidyverse)
library(rrvgo)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
# input_file_name <- "als"
input_file_path <-
paste0(
"data/02_gene_set_enrichment/02_significant_gene_enrichment_results/",
input_file_name,
"/"
)
output_file_path <-
paste0(
"data/02_gene_set_enrichment/03_significant_non_redundant_gene_enrichmentResults/",
input_file_name,
"/"
)
go_file_names <-
list.files(
path = input_file_path,
pattern = "GO",
all.files = FALSE,
full.names = FALSE
)
#######################
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
for (go_file_name in go_file_names) {
go_path_name_to_summarise <-
paste0(input_file_path, "/", go_file_name)
go_data_frame <-
read.csv(go_path_name_to_summarise, header = TRUE)
simMatrix <- calculateSimMatrix(
go_data_frame$ID,
orgdb = "org.Hs.eg.db",
ont = if (go_file_name == "GO_Biological_Process_2023.csv") {
"BP"
} else if (go_file_name == "GO_Cellular_Component_2023.csv") {
"CC"
} else {
"MF"
},
method = "Rel"
)
scores <-
setNames(-log10(go_data_frame$Adjusted.P.value), go_data_frame$ID)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold = 0.7,
orgdb = "org.Hs.eg.db")
reducedGoTerms <-
data.frame(matrix(nrow = 0, ncol = length(colnames(reducedTerms))))
colnames(reducedGoTerms) <- colnames(reducedTerms)
for (cluster in seq(unique(reducedTerms$cluster))) {
temp_reducedTerms <- reducedTerms %>%
filter(cluster == !!cluster) %>%
arrange(desc(score)) %>%
slice(1:3)
reducedGoTerms <- rbind(reducedGoTerms, temp_reducedTerms)
}
go_data_frame <-
go_data_frame[go_data_frame$ID %in% reducedGoTerms$go, ]
write.csv(go_data_frame,
paste0(output_file_path, go_file_name),
row.names = FALSE)
}
library(dplyr)
library(tidyverse)
library(rrvgo)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0(
"data/02_gene_set_enrichment/02_significant_gene_enrichment_results/",
input_file_name,
"/"
)
output_file_path <-
paste0(
"data/02_gene_set_enrichment/03_significant_non_redundant_gene_enrichmentResults/",
input_file_name,
"/"
)
go_file_names <-
list.files(
path = input_file_path,
pattern = "GO",
all.files = FALSE,
full.names = FALSE
)
#######################
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
for (go_file_name in go_file_names) {
go_path_name_to_summarise <-
paste0(input_file_path, "/", go_file_name)
go_data_frame <-
read.csv(go_path_name_to_summarise, header = TRUE)
simMatrix <- calculateSimMatrix(
go_data_frame$ID,
orgdb = "org.Hs.eg.db",
ont = if (go_file_name == "GO_Biological_Process_2023.csv") {
"BP"
} else if (go_file_name == "GO_Cellular_Component_2023.csv") {
"CC"
} else {
"MF"
},
method = "Rel"
)
scores <-
setNames(-log10(go_data_frame$Adjusted.P.value), go_data_frame$ID)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold = 0.7,
orgdb = "org.Hs.eg.db")
reducedGoTerms <-
data.frame(matrix(nrow = 0, ncol = length(colnames(reducedTerms))))
colnames(reducedGoTerms) <- colnames(reducedTerms)
for (cluster in seq(unique(reducedTerms$cluster))) {
temp_reducedTerms <- reducedTerms %>%
filter(cluster == !!cluster) %>%
arrange(desc(score)) %>%
slice(1:3)
reducedGoTerms <- rbind(reducedGoTerms, temp_reducedTerms)
}
go_data_frame <-
go_data_frame[go_data_frame$ID %in% reducedGoTerms$go, ]
write.csv(go_data_frame,
paste0(output_file_path, go_file_name),
row.names = FALSE)
}
library(data.table)
library(dplyr)
input_file_path <-
paste0("data/07_magma_results/", input_file_name, "/")
input_file_names <-
list.files(input_file_path, pattern = ".gsa.out")
output_file_path <-
paste0("data/08_p_value_adjusted_magma_results/", input_file_name, "/")
library(data.table)
library(dplyr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
# input_file_name <- "als"
input_file_path <-
paste0("data/07_magma_results/", input_file_name, "/")
input_file_names <-
list.files(input_file_path, pattern = ".gsa.out")
output_file_path <-
paste0("data/08_p_value_adjusted_magma_results/", input_file_name, "/")
for(file in input_file_names) {
input_file_name <-
paste0(input_file_path, file)
gene_set_results <-
input_file_name %>%
fread(skip = 4,
fill = TRUE) %>%
arrange(P) %>%
filter(
!FULL_NAME %in% c(
"diseaseAssociatedGenes_diseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAndDiseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAssociatedGenes.csv"
)
) %>%
relocate(FULL_NAME) %>%
dplyr::select(!VARIABLE)
gene_set_results$Adjust_P <-
p.adjust(gene_set_results$P,
method = "BH")
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
fwrite(gene_set_results,
paste0(output_file_path, file, ".csv"))
}
library(data.table)
library(dplyr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/07_magma_results/", input_file_name, "/")
input_file_names <-
list.files(input_file_path, pattern = ".gsa.out")
output_file_path <-
paste0("data/08_p_value_adjusted_magma_results/", input_file_name, "/")
for(file in input_file_names) {
input_file_name <-
paste0(input_file_path, file)
gene_set_results <-
input_file_name %>%
fread(skip = 4,
fill = TRUE) %>%
arrange(P) %>%
filter(
!FULL_NAME %in% c(
"diseaseAssociatedGenes_diseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAndDiseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAssociatedGenes.csv"
)
) %>%
relocate(FULL_NAME) %>%
dplyr::select(!VARIABLE)
gene_set_results$Adjust_P <-
p.adjust(gene_set_results$P,
method = "BH")
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
fwrite(gene_set_results,
paste0(output_file_path, file, ".csv"))
}
library(data.table)
library(dplyr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/07_magma_results/", input_file_name, "/")
input_file_names <-
list.files(input_file_path, pattern = ".gsa.out")
output_file_path <-
paste0("data/08_p_value_adjusted_magma_results/", input_file_name, "/")
for(file in input_file_names) {
input_file_name <-
paste0(input_file_path, file)
gene_set_results <-
input_file_name %>%
fread(skip = 4,
fill = TRUE) %>%
arrange(P) %>%
filter(
!FULL_NAME %in% c(
"diseaseAssociatedGenes_diseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAndDiseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAssociatedGenes.csv"
)
) %>%
relocate(FULL_NAME) %>%
dplyr::select(!VARIABLE)
gene_set_results$Adjust_P <-
p.adjust(gene_set_results$P,
method = "BH")
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
fwrite(gene_set_results,
paste0(output_file_path, file, ".csv"))
}
library(data.table)
library(dplyr)
input_file_name <- commandArgs(trailingOnly = TRUE)[1]
input_file_name <- "als"
input_file_path <-
paste0("data/07_magma_results/", input_file_name, "/")
input_file_names <-
list.files(input_file_path, pattern = ".gsa.out")
output_file_path <-
paste0("data/08_p_value_adjusted_magma_results/", input_file_name, "/")
for(file in input_file_names) {
input_file_name <-
paste0(input_file_path, file)
gene_set_results <-
input_file_name %>%
fread(skip = 4,
fill = TRUE) %>%
arrange(P) %>%
filter(
!FULL_NAME %in% c(
"diseaseAssociatedGenes_diseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAndDiseaseAssociatedGenes.csv",
"diseaseAssociatedGenes_gwasAssociatedGenes.csv"
)
) %>%
relocate(FULL_NAME) %>%
dplyr::select(!VARIABLE)
gene_set_results$Adjust_P <-
p.adjust(gene_set_results$P,
method = "BH")
dir.create(output_file_path,
showWarnings = FALSE,
recursive = TRUE)
fwrite(gene_set_results,
paste0(output_file_path, file, ".csv"))
}
reducedTerms
View(reducedTerms)
